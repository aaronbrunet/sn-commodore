<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>other</category>
        <client_script><![CDATA[function client($scope, spUtil, spUIActionsExecuter, $timeout, i18n, spModal) {
	var ESIGNATURE = {
		TYPE: "form",
		APPROVE_SYS: "cbfe291147220100ba13a5554ee4904d",
		REJECT_SYS: "580f711147220100ba13a5554ee4904b"
	};

	var c = this;

	if ($scope.options.portal == true || $scope.options.portal == 'true') {
		$scope.contentColClass = "col-xs-12";
		$scope.options.portal = true;
	} else {
		$scope.options.portal = false;
		$scope.contentColClass = "col-sm-8";
	}

	$scope.data.op = "";
	spUtil.recordWatch($scope, "sysapproval_approver", "state=requested^approverIN" + $scope.data.myApprovals.toString(), function(data) {
		// don't double-roundtrip if update came from record just approved/rejected
		if (data.data.sys_id != $scope.data.target)
			spUtil.update($scope);
	});

	$scope.approvalsInProgressFor = [];
  
	c.openEventModal = function(event_id){
		var event_options = {action:'cat_item',event_id:event_id,display:'list'};
		spModal.open({
			title: 'Event Details',
			widget: 'cc-event-card',
			widgetInput: event_options,
			buttons: [{label: 'Close',primary:true}]
		}).then(function(){
			console.log('Modal closed');
		});		
	};

	c.exceptionAction = function(approval){
		if(approval.task.exception_record){
			var msg = approval.task.exception_record.msg + '<br/>Are you <b>sure</b> you want to do this?';
			spModal.open({
				title: 'Approve Exception Request',
				message: msg,
				buttons: [
					{label: 'Cancel', cancel: true},					
					{label: 'Approve exception', primary: true, class:'cc-button-warning'}
					]
			}).then(function(){
				//c.action(state);
				$scope.approve(approval.sys_id, false);
				spUtil.update($scope);
				$scope.server.update();
			});
		}
	}

	function get(id) {
		var target = $scope.data.target;
    		var operation = $scope.data.op;
		var taskNumber = getTaskNumber(target);
		spUtil.update($scope).then(function(result) {
			updateInProgressApprovals(target);
			$timeout(function () {
				var approvalIds = result && result.ids;
				// Set focus on last element
				if (id == -1)
					id = approvalIds[approvalIds.length - 1];
				// set focus on first element
				else if (id == 0)
					id = approvalIds[0];
				var key = id == "no-approval" ? "no-approval" : ("approval_task_" + id);
				setFocus(key, operation, taskNumber);
			}, 500);
		});
	}
	
	function updateInProgressApprovals(id) {
		if (id)
			$scope.approvalsInProgressFor.splice($scope.approvalsInProgressFor.indexOf(id), 1);
	}

	function getTaskNumber(id) {
    		var currentApproval = $scope.data.approvals.find(function(item){
			return item.sys_id === id;
		});
		var taskNumber = currentApproval && currentApproval.task.number;
		return taskNumber;
	}

	function setFocus(id, operation, taskNumber) {
		var nextApprovalElement = document.getElementById(id);
		if (nextApprovalElement) {
			var message = operation === 'approved' ? 
				i18n.getMessage("{0} has been approved").withValues([taskNumber]) : 
				i18n.getMessage("{0} has been rejected").withValues([taskNumber]);
			$( "<span/>", {
				"class": 'sr-only',
				"text": message,
			}).prependTo(nextApprovalElement);
			nextApprovalElement.focus();
			$(nextApprovalElement).one('blur', function() {
				$(nextApprovalElement).find('.sr-only').remove();
			})
		}
	}

	function getNextApproval(id) {
		var approvals = $scope.data.ids,
		currentIndex = approvals.indexOf(id),
		hasNext = $scope.data.pagination.hasNext,
		hasPrevious = $scope.data.pagination.hasPrevious;

		// Action on only approval and no approval left
		if (approvals.length == 1 && !hasNext && !hasPrevious)
			return "no-approval";
		// Action on only approval in last page
		if (approvals.length == 1 && !hasNext)
			return 0;
		// Action on last approval item in current page
		if (currentIndex == approvals.length - 1 && hasNext)
			return -1;
		// Action on last approval item in last page
		if (currentIndex == approvals.length - 1)
			return approvals[currentIndex - 1];

		if (currentIndex >= 0 && currentIndex < approvals.length - 1)
			return approvals[currentIndex + 1]
	}

	$scope.approve = function(id, esigRequired) {
		var requestParams = {
			username: $scope.data.esignature.username,
			userSysId: $scope.data.esignature.userSysId
		};

		if($scope.data.esignature.e_sig_required && esigRequired) {
			spUIActionsExecuter.executeFormAction(ESIGNATURE.APPROVE_SYS, "sysapproval_approver" , id, [] , "", requestParams).then(function(response) {
			});			
		} else {
			$scope.approvalsInProgressFor.push(id);
			$scope.data.op = "approved";
			$scope.data.target = id;
			get(getNextApproval(id));
		}
  }

	$scope.reject = function(id, esigRequired) {
		var requestParams = {
			username: $scope.data.esignature.username,
			userSysId: $scope.data.esignature.userSysId
		};

		if($scope.data.esignature.e_sig_required && esigRequired) {
			spUIActionsExecuter.executeFormAction(ESIGNATURE.REJECT_SYS, "sysapproval_approver" , id, [] , "", requestParams).then(function(response) {
			});
		} else {
			$scope.approvalsInProgressFor.push(id);
			$scope.data.op = "rejected";
			$scope.data.target = id;
			get(getNextApproval(id));
		}
	}

	// pagination
	$scope.previousPage = function() {
		if ($scope.data.pagination.currentPage > 1)
			$scope.data.pagination.currentPage = $scope.data.pagination.currentPage - 1;
		else
			$scope.data.pagination.currentPage = 0;
      
		$scope.data.op = "previous";
		$scope.data.target = null;

		get(0);
	}

	$scope.nextPage = function() {
		$scope.data.op = "next";
		$scope.data.target = null;
		$scope.data.pagination.currentPage = $scope.data.pagination.currentPage+1;
		get(0);
	}
	
	$scope.getItemDisplay = function(task) {
		if (task.number && task.short_description)
			return task.number + " - " + task.short_description;
		
		return task.number || task.short_description || "";
	}
}]]></client_script>
        <controller_as>c</controller_as>
        <css>.pre-wrap {&#13;
  white-space:pre-wrap;&#13;
}&#13;
&#13;
.col-sm-4 {&#13;
  padding-left: 0px;&#13;
}&#13;
&#13;
.approval-details label {&#13;
	font-weight: bold;&#13;
}&#13;
&#13;
#banners {&#13;
	max-width: max-content;&#13;
  margin-top: 2rem;&#13;
}&#13;
	    &#13;
@media screen and (max-width: 992px) {&#13;
  .col-sm-4 {&#13;
    padding-right: 0px;&#13;
  }&#13;
&#13;
  .col-sm-8 {&#13;
    padding-left: 0px;&#13;
  }&#13;
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list>color,glyph</field_list>
        <has_preview>false</has_preview>
        <id>cc-approvals</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>CC Approvals</name>
        <option_schema>[{"hint":"If false, buttons are stacked on the right; if true, they are side-by-side","name":"portal","section":"Presentation","label":"Buttons stacked side by side","type":"boolean"},{"hint":"Maximum number of elements that are shown in the list of approvals","name":"max_number_of_elements_shown_on_the_list","default_value":"10","section":"Presentation","label":"Max number of elements shown in the list (only positive numbers &gt; 0, 10 otherwise)","type":"integer"}]</option_schema>
        <public>false</public>
        <roles/>
        <script><![CDATA[g_approval_form_request = true;

var constants = new x_snc_commodore_0.CCUtils().getConstants();
var cat_rsvp = constants.CAT_ITEM_EVENTSIGNUP;
var cat_bev = constants.CAT_ITEM_BEVSIGNUP;

data.esignature = {
		username:  gs.getUserName(),
		userSysId: gs.getUserID(),
		e_sig_required: false
};

function getRefData(table,id){
	if(!table || !id){
		return;
	}
	var ref = new GlideRecord(table);
	ref.get(id);
	return ref;
}

function getVarsFromRITM(task_id){
	var ritm_data = [];
	var vars = new GlideRecord('sc_item_option_mtom');
	vars.addEncodedQuery('request_item.sys_id='+task_id);
	vars.query();
	while(vars.next()){
		var variable = {
			label: vars.sc_item_option.item_option_new.question_text.toString(),
			name: vars.sc_item_option.item_option_new.name.toString(),
			type: vars.sc_item_option.item_option_new.type.toString(),
			value: vars.sc_item_option.value.toString()			
		};
		if(variable.type=='8'){
			variable.table = vars.sc_item_option.item_option_new.reference.toString();
		}			
		ritm_data.push(variable);
	}
	return ritm_data;		
}

//we get only a max number of elements to avoid to have a big list of it
var maxNumberOfItemsInTheList = parseInt(options.max_number_of_elements_shown_on_the_list);
//set 10 if maxnumber is undefined, empty or negative value
maxNumberOfItemsInTheList = maxNumberOfItemsInTheList>0 ? maxNumberOfItemsInTheList : 10; 
var initRow = 0;
var lastRow = maxNumberOfItemsInTheList;
var currentPage = 0; //0 is the first page
if (input) {
	// update pagination
	currentPage = input.pagination.currentPage;
	initRow = (currentPage * maxNumberOfItemsInTheList);
	lastRow = initRow + maxNumberOfItemsInTheList;
	
	if (input.op == 'approved' || input.op == 'rejected') {
		var app = new GlideRecord("sysapproval_approver");
		if (app.get(input.target)) {
			var isMine = gs.hasRole("approval_admin") || (gs.hasRole("approver_user") && new x_snc_commodore_0.CCApprovalUtils().isApprovalMine(app));
			if (isMine) {
				app.state = input.op;
				app.update();
				if (currentPage > 0 && !input.pagination.hasNext && input.approvals.length == 1) {
					currentPage--;
					initRow = (currentPage * maxNumberOfItemsInTheList);
					lastRow = initRow + maxNumberOfItemsInTheList;
				}
			}
		}
	}
}

data.ViewApprovalPageMsg = gs.getMessage("View approval page");


var gr = new GlideRecord('sysapproval_approver');
gr.chooseWindow(initRow, lastRow);
var qc1 = gr.addQuery("state", "requested");
//if (input)
//  qc1.addOrCondition("sys_id", "IN", input.ids);
data.myApprovals = new x_snc_commodore_0.CCApprovalUtils().getMyApprovals();
gr.addQuery("approver", data.myApprovals);
gr.orderBy("sys_created_on");
gr.query();
var rowCount = gr.getRowCount();
var approvals = [];
var ids = [];
var source_tables = [];

while (gr.next()) {
  var task = getRecordBeingApproved(gr);
	if (!task.isValidRecord())
		continue;

  ids.push(gr.getUniqueValue());
  var t = {};
  t.number = task.getDisplayValue();
  t.short_description = task.short_description.toString();
  t.sys_id = task.getUniqueValue();
  t.cat_item = task.cat_item.name.getDisplayValue();
  if(task.cat_item.toString() == cat_rsvp){
	t.type = 'event';
  }
  if(task.cat_item.toString() == cat_bev){
	t.type = 'beverage';
  }
  console.log([t.type,task.cat_item.toString()]);
  t.vars = getVarsFromRITM(t.sys_id);
  
  if(t.type == 'event'){
		var event_choice = t.vars.find(o => o.name == 'club_event');
		//console.log(event_choice);
		var ref = getRefData(event_choice.table,event_choice.value);		
		t.event = {
			event_id: ref.sys_id.toString(),
			slots: ref.slots.toString(),
			name: ref.short_description.toString(),
			datetime: ref.start.toString()
		};
		var attendees_curr_count = new CCUtils().getAttendeesID(t.event.event_id).length;
		t.event.attendees_curr_count = attendees_curr_count;
		t.all_clear = t.event.attendees_curr_count < t.event.slots;
		t.banner_msg = 'This event has available capacity and can be safely approved.';
		if(!t.all_clear){
			t.banner_msg = 'This event has reached capacity. Approval will increase the max capacity.';
			t.exception_record = {
				table: event_choice.table,
				record: t.event,
				msg: t.banner_msg
			};
		}
	}

	if(t.type == 'beverage'){
		var event_choice = t.vars.find(o => o.name == 'club_event');
		//console.log(event_choice);
		var ref = getRefData(event_choice.table,event_choice.value);		
		t.event = {
			event_id: ref.sys_id.toString(),
			beverage_count: ref.beverage_count.toString(),
			name: ref.short_description.toString(),
			datetime: ref.start.toString()
		};
		//var beverage_choice = t.vars.find
		t.beverage = {
			bev_id: ref.sys_id.toString()
		}
		var bev_curr_count = new CCUtils().getBevRecords(t.event.event_id).length;
		t.event.bev_curr_count = bev_curr_count;
		t.all_clear = t.event.bev_curr_count < t.event.beverage_count;
		t.banner_msg = 'This event has available beverage capacity and can be safely approved.';
		if(!t.all_clear){
			t.banner_msg = 'This event has reached beverage capacity. Approval will increase the max capacity.';
			t.exception_record = {
				table: event_choice.table,
				record: t.event,
				msg: t.banner_msg
			};
		}
	}

		//console.log(t);
  
  if (gr.getValue("approver") != gs.getUserID())
	  t.approver = gr.approver.getDisplayValue();
  if (task.isValidField("opened_by") && !task.opened_by.nil())
	  t.opened_by = task.opened_by.getDisplayValue();
  // requestor >> opener
  if (task.isValidField("requested_by") && !task.requested_by.nil())
	  t.opened_by = task.requested_by.getDisplayValue();
	if(task.isValidField("start_date") && task.isValidField("end_date")){
	t.start_date = task.start_date.getDisplayValue();
	t.end_date = task.end_date.getDisplayValue();
  }
  t.quantity = task.quantity.getDisplayValue();
  t.table = task.getLabel();
  if (task.getValue("price") > 0)
	  t.price = task.getDisplayValue("price");

  if (task.getValue("recurring_price") > 0)
	  t.recurring_price = task.getDisplayValue("recurring_price");

  t.recurring_frequency = task.getDisplayValue("recurring_frequency");

  var items = [];
  var idx = 0;
  var itemsGR = new GlideRecord("sc_req_item");
  itemsGR.addQuery("request", task.sys_id);
  itemsGR.query();
  if (itemsGR.getRowCount() > 1)
    t.short_description = itemsGR.getRowCount() + " requested items";

  while (itemsGR.next()) {
    var item = {};
    item.short_description = itemsGR.short_description.toString();
    if (itemsGR.getValue("price") > 0)
      item.price = itemsGR.getDisplayValue("price");
    if (itemsGR.getValue("recurring_price") > 0) {
      item.recurring_price = itemsGR.getDisplayValue("recurring_price");
      item.recurring_frequency = itemsGR.getDisplayValue("recurring_frequency");
    }
    if (itemsGR.getRowCount() == 1) {
			item.variables = new global.GlobalServiceCatalogUtil().getVariablesForTask(itemsGR, true);
			item.variableSummarizerWidget = $sp.getWidget('sc-variable-summarizer', {'variables' : item.variables, 'toggle' : false, 'task' :t.number });
      t.short_description = itemsGR.short_description.toString();
    }

    items[idx] = item;
    idx++;
  }

  var j = {};
  j.sys_id = gr.getUniqueValue();
  j.table = gr.getRecordClassName();
	j.approval_source_table = gr.getValue("source_table");
	if (!j.approval_source_table)
		j.approval_source_table = gr.sysapproval.sys_class_name + "";
	//j.requireEsigApproval = esigRequiredMap[j.approval_source_table];
	j.task = t;
  if (task) {
		j.variables = new global.GlobalServiceCatalogUtil().getVariablesForTask(task, true);
		j.variableSummarizerWidget = $sp.getWidget('sc-variable-summarizer', {'variables' : j.variables, 'toggle' : false, 'task': t.number });
	}
  j.items = items;
  j.state = gr.getValue("state");
  j.stateLabel = gr.state.getDisplayValue();
  approvals.push(j);
}

data.ids = ids;
data.approvals = approvals;
data.showApprovals = gs.getUser().hasRole('approver_user');
// for pagination
data.pagination = {};
data.pagination.hasNext = (approvals.length == (parseInt(lastRow) - parseInt(initRow)) && lastRow < rowCount);
data.pagination.hasPrevious = parseInt(initRow) > 0;
data.pagination.from = parseInt(initRow + 1);
data.pagination.to = parseInt(lastRow) < parseInt(rowCount) ? parseInt(lastRow) : parseInt(rowCount);
data.pagination.of = parseInt(rowCount);
data.pagination.showPagination = data.pagination.hasPrevious || data.pagination.hasNext;
data.pagination.currentPage = data.pagination.from > data.pagination.to ? currentPage -1 : currentPage;
delete g_approval_form_request;
function getRecordBeingApproved(gr) {
  if (!gr.sysapproval.nil())
    return gr.sysapproval.getRefRecord();

  return gr.document_id.getRefRecord();
}
	
	
]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>aaron.brunet</sys_created_by>
        <sys_created_on>2023-03-27 14:55:07</sys_created_on>
        <sys_id>834c60168735e5504c1fc99d0ebb35ad</sys_id>
        <sys_mod_count>56</sys_mod_count>
        <sys_name>CC Approvals</sys_name>
        <sys_package display_value="Commodore's Club" source="x_snc_commodore_0">7f31176e87a021106e4b11f83cbb358d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Commodore's Club">7f31176e87a021106e4b11f83cbb358d</sys_scope>
        <sys_update_name>sp_widget_834c60168735e5504c1fc99d0ebb35ad</sys_update_name>
        <sys_updated_by>aaron.brunet</sys_updated_by>
        <sys_updated_on>2023-04-08 19:14:18</sys_updated_on>
        <template><![CDATA[<div class="panel panel-{{::options.color}} b" ng-if="data.showApprovals">
  <div class="panel-heading">
    <h3 class="h4 panel-title">
      <fa ng-if="::options.glyph.length" name="{{::options.glyph}}" class="m-r-sm" ></fa>
      ${My Approvals}
      <label ng-if="data.pagination.showPagination && (data.pagination.from <= data.pagination.to)" class="pull-right text-info">
        <span ng-if="data.pagination.from != data.pagination.to">
          {{data.pagination.from}} ${to_lower}
        </span>
        {{data.pagination.to}} ${of} {{data.pagination.of}}
      </label>
    </h3>
  </div>
  <div class="panel-body" ng-class="{'padder-b-none': data.approvals.length != 0}">
    <div ng-if="data.approvals.length == 0 && data.pagination.of == 0" tabindex="-1" id="no-approval">
      ${You have no pending approvals}
    </div>
    <div ng-if="data.approvals.length == 0 && data.pagination.of != 0">
      ${Loading approvals...}
    </div>
    <div ng-repeat="approval in data.approvals track by $index" class="sp-approval m-b-xl">
      <div class="row">
        <div ng-class="contentColClass">
          <div ng-if="approval.task.number || approval.task.short_description">
            <a ng-href="?id=cc_approval&table=sysapproval_approver&sys_id={{::approval.sys_id}}" id="approval_task_{{::approval.sys_id}}"title="{{data.ViewApprovalPageMsg}}">
              <span ng-if="approval.task.number">{{::approval.task.number}}</span>
              <span ng-if="approval.task.number && approval.task.cat_item"> - </span>
             <!-- <span ng-if="approval.task.short_description">{{::approval.task.short_description}}</span>-->
              <span ng-if="approval.task.cat_item">{{approval.task.cat_item}}</span>
            </a>
          </div>
          <div class="approval-details">
            <div ng-if="approval.task.opened_by"><label>${Requestor}</label> {{::approval.task.opened_by}}</div>
            <div ng-if="approval.task.approver"><label>${Approver}</label> {{::approval.task.approver}}</div>
            <div ng-if="approval.task.start_date"><label>${Start}</label> {{::approval.task.start_date}}</div>
            <div ng-if="approval.task.end_date"><label>${End}</label> {{::approval.task.end_date}}</div>
            <div ng-if="approval.task.quantity && approval.task.quantity > 1"><label>${Quantity}</label> {{::approval.task.quantity}}</div>
            <div ng-if="approval.task.price"><label>${Price}</label> {{::approval.task.price}}
              <span ng-if="approval.task.recurring_price"><label>${Recurring price}</label> {{::approval.task.recurring_price}} {{::approval.task.recurring_frequency}}</span>
              <label ng-if="approval.task.quantity && approval.task.quantity > 1"> ${each}</label>
            </div>
            <div ng-if="approval.task.event"><label>${Event}</label> {{approval.task.event.name}}</div>
            <button ng-if="approval.task.event.event_id" role="button" class="btn-default btn" ng-click="c.openEventModal(approval.task.event.event_id)">Event Details</button>
            <div ng-if="approval.task.type == 'beverage'"></div>
            

          </div>
          <div id="banners" ng-if="approval.task.exception_record">
          <div class="banner {{approval.task.all_clear ? 'banner-success' : 'banner-warning'}}">
            <span>
              <i ng-if="!approval.task.all_clear" class="ri-error-warning-fill"></i>
              <i ng-if="approval.task.all_clear" class="ri-checkbox-circle-line"></i>
              {{approval.task.banner_msg}}
            </span>
          </div>
        </div>
          <!--
          <div ng-if="approval.items.length == 1">
            <div ng-repeat="item in approval.items">
             <sp-widget ng-if="item.variableSummarizerWidget" widget="item.variableSummarizerWidget"></sp-widget> 
            </div>
          </div>
			
          <sp-widget ng-if="approval.variableSummarizerWidget" widget="approval.variableSummarizerWidget"></sp-widget>
          -->
          </div>
        <div ng-if="!options.portal" class="col-sm-4">
          <button name="approve" id="approve_button_{{::approval.sys_id}}" aria-labelledby=" approve_button_{{::approval.sys_id}} approval_task_{{::approval.sys_id}}" ng-if="approval.task.all_clear && approval.state == 'requested'" class="btn btn-primary btn-block" style="border-width:1px;" ng-click="approve(approval.sys_id, false);">${Approve}</button>
          <button name="approve" id="approve_button_{{::approval.sys_id}}" aria-labelledby=" approve_button_{{::approval.sys_id}} approval_task_{{::approval.sys_id}}" ng-if="!approval.task.all_clear && approval.state == 'requested'" class="btn cc-button-warning btn-block" style="border-width:1px;" ng-click="c.exceptionAction(approval);">${Approve Exception}</button>

          <button name="reject" id="reject_button_{{::approval.sys_id}}" aria-labelledby=" reject_button_{{::approval.sys_id}} approval_task_{{::approval.sys_id}}" ng-if="approval.state == 'requested'" class="btn btn-default btn-block" ng-click="reject(approval.sys_id, false);">${Reject}</button>
          <button ng-if="approval.state == 'approved'" class="btn btn-success btn-block">{{approval.stateLabel}}</button>
          <button ng-if="approval.state == 'rejected'" class="btn btn-danger btn-block">{{approval.stateLabel}}</button>
          <button ng-if="approval.state != 'requested'" class="btn btn-default btn-block" style="visibility:hidden">{{approval.stateLabel}}</button>
        </div>
        <div ng-if="options.portal && approval.state == 'requested'" class="col-xs-6">
          <button name="reject" ng-disabled="approvalsInProgressFor.indexOf(approval.sys_id) > -1" id="reject_button_{{::approval.sys_id}}" aria-labelledby=" reject_button_{{::approval.sys_id}} approval_task_{{::approval.sys_id}}" class="btn btn-default btn-block" ng-click="reject(approval.sys_id, approval.requireEsigApproval);">${Reject}</button>
        </div>
        <div ng-if="options.portal && approval.state == 'requested'" class="col-xs-6">
          <button ng-if="approval.task.all_clear" name="approve" ng-disabled="approvalsInProgressFor.indexOf(approval.sys_id) > -1" id="approve_button_{{::approval.sys_id}}" aria-labelledby=" approve_button_{{::approval.sys_id}} approval_task_{{::approval.sys_id}}" class="btn btn-primary btn-block" ng-click="approve(approval.sys_id, approval.requireEsigApproval);">${Approve}</button>
          <button ng-if="!approval.task.all_clear" name="approve" ng-disabled="approvalsInProgressFor.indexOf(approval.sys_id) > -1" id="approve_button_{{::approval.sys_id}}" aria-labelledby=" approve_button_{{::approval.sys_id}} approval_task_{{::approval.sys_id}}" class="btn cc-button-warning btn-block" ng-click="approve(approval.sys_id, approval.requireEsigApproval);">${Approve Exception}</button>
        </div>
        <div ng-if="options.portal && approval.state != 'requested'" class="col-xs-12">
          <button ng-if="approval.state == 'approved'" class="btn btn-success btn-block">{{approval.stateLabel}}</button>
          <button ng-if="approval.state == 'rejected'" class="btn btn-danger btn-block">{{approval.stateLabel}}</button>
        </div>        
      </div>   
      <hr ng-if="$index != data.approvals.length - 1">
    </div> <!-- body -->
  </div> 
  <div class="panel-footer clearfix" ng-if="data.pagination.showPagination">
    <a id="previous-btn" href="javascript:void(0)" ng-click="previousPage()" ng-show="data.pagination.hasPrevious" class="pull-left btn btn-sm btn-default" aria-label="${Pagination button Previous}">
      <i class="fa fa-arrow-left m-r-sm" aria-hidden="true"></i>${Previous}</a>
    <a id="next_btn" href="javascript:void(0)" ng-click="nextPage()" ng-show="data.pagination.hasNext" class="pull-right btn btn-sm btn-default " aria-label="${Pagination button Next}">
      ${Next}<i class="fa fa-arrow-right m-r-sm col-md-offset-3" aria-hidden="true"></i></a>
</div>
</div>]]></template>
    </sp_widget>
</record_update>
