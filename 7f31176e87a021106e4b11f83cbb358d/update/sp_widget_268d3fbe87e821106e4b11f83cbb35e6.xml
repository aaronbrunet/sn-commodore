<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller=function($scope,$timeout,$interval,spUtil) {
  /* widget controller */
	var c = this;
	var data = $scope.data;
	
	spUtil.recordWatch($scope, "x_snc_commodore_0_votes", "event_attendances.event=607174fe87a021106e4b11f83cbb351f", function(name) {
		console.log(name.data.operation); 
		console.log(name); 
		spUtil.update($scope);
    });

	$scope.votesToWidth = function(curr,total){
		return (curr / total ) * 100;
	};

	// $scope.refreshLive = function(){
		// var refresh;
		// if($scope.data.voting_open){
			
		// 	refresh = $interval(function(){
		// 		console.log("Refresh")
		// 		console.log($scope.data.voting_open);
		// 		if($scope.data.voting_open){
		// 			spUtil.update($scope);
		// 		}
		// 		else {
		// 			$interval.cancel(refresh);
		// 		}
		// 	}, 10000);
		// } else {
		// 	$interval.cancel(refresh);
		// }
	// }
};]]></client_script>
        <controller_as>c</controller_as>
        <css/>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>cc-event-voting</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {
  
}]]></link>
        <name>CC Event Voting</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
  /* populate the 'data' object */
  /* e.g., data.table = $sp.getValue('table'); */

var event = new GlideRecord('x_snc_commodore_0_events');
event.get('607174fe87a021106e4b11f83cbb351f');
data.voting_open = event.getValue('voting_open') == 1;
var attendees = [];
var getAttendees = new GlideRecord('x_snc_commodore_0_club_event_attendances');
getAttendees.addQuery("event",event.sys_id);
getAttendees.query();
while(getAttendees.next()){
	var aObj = {};
	$sp.getRecordElements(aObj, getAttendees, 'user');
	aObj.sys_id = getAttendees.getValue('sys_id');
	attendees.push(aObj);
}

var b_list = event.drinks.toString();
//console.log(b_list);
var beverages = [];
var getBev = new GlideRecord('x_snc_commodore_0_beverage');
getBev.addEncodedQuery('sys_idIN'+b_list);
getBev.query();
while(getBev.next()){
	var bObj = {};
	$sp.getRecordElements(bObj, getBev, 'name,masked_name');
	bObj.sys_id = getBev.getValue('sys_id');
	bObj.votes = 0;
	beverages.push(bObj);
}

var votes = [];
var getVotes = new GlideRecord('x_snc_commodore_0_votes');
getVotes.addQuery('event_attendances.event',event.sys_id);
getVotes.query();
data.vote_count = getVotes.getRowCount();
while(getVotes.next()){
	var vObj = {};
	$sp.getRecordElements(vObj, getVotes, 'vote,user,beverage');
	vObj.beverage.masked_name = getVotes.beverage.masked_name.getDisplayValue(); 
	vObj.sys_id = getVotes.getValue('sys_id');
	votes.push(vObj);
	var targetBeverage = beverages.findIndex(b => b.sys_id == vObj.beverage.value);
	beverages[targetBeverage].votes += 1;
	// console.log(beverages[targetBeverage]);
}
// console.log(JSON.stringify(votes));

data.attendees = attendees;
data.beverages = beverages;
console.log(data.beverages);
data.bevVotes = [...beverages].sort((a,b) => b.votes - a.votes);
console.log(data.bevVotes);
data.votes = votes;
// var d = new Date();
// data.refreshed = d;//.getByFormat('HH:mm');
var gd = new GlideDate();
var g = gd.getInternalFormattedLocalTime();
console.log(g);
data.refreshed = new Date(g);

})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>aaron.brunet</sys_created_by>
        <sys_created_on>2023-01-26 16:09:09</sys_created_on>
        <sys_id>268d3fbe87e821106e4b11f83cbb35e6</sys_id>
        <sys_mod_count>100</sys_mod_count>
        <sys_name>CC Event Voting</sys_name>
        <sys_package display_value="Commodore's Club" source="x_snc_commodore_0">7f31176e87a021106e4b11f83cbb358d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Commodore's Club">7f31176e87a021106e4b11f83cbb358d</sys_scope>
        <sys_update_name>sp_widget_268d3fbe87e821106e4b11f83cbb35e6</sys_update_name>
        <sys_updated_by>aaron.brunet</sys_updated_by>
        <sys_updated_on>2023-01-31 19:48:43</sys_updated_on>
        <template><![CDATA[<div>
<h1>The Cellar</h1>
  <div>
    <h2>Event Info</h2>
    <div>
      <i class="fa fa-clock-o" aria-hidden="true" title="${Last refreshed}"></i>
		<sn-time-ago timestamp="::data.refreshed"/>
    </div>
  </div>
  
  <div ng-if="data.voting_open">
    <!--<button ng-click="refreshLive()">Refresh Live</button>-->
 	Voting is open
    <!--<input type="checkbox" ng-model="data.voting_open"/>-->
  </div>
  <div>
    <h3>Attendees</h3>
    <div ng-repeat="a in data.attendees">
    	{{a.user.display_value}}
    </div>
  </div>
  <div>
    <h3>Beverages</h3>
    <div ng-repeat="b in data.beverages">
    	{{b.name.display_value}} ({{b.masked_name.display_value}})
    </div>
  </div>
  <div>
    <h3>Beverage Votes</h3>
    <div ng-repeat="bv in data.bevVotes">
      <div>
    	{{bv.name.display_value}} ({{bv.masked_name.display_value}}): {{bv.votes}} vote{{bv.votes==1?'':'s'}}
      </div>
      <div style="display:block;background-color:red;width:{{votesToWidth(bv.votes,data.votes.length)}}%;height:10px;"></div>
    </div>
  </div>
  <div>
    <h3>Voting list</h3>
    Votes:{{data.vote_count}}
	<div ng-repeat="v in data.votes">
    	{{v.user.display_value}} voted for {{v.beverage.masked_name}}
      
    </div>
  </div>
</div>]]></template>
    </sp_widget>
</record_update>
